---
title: "state_emissions_per_plant"
format: html
editor: visual
---

### Loading Libraries

```{r}
library(terra)
library(sf)
library(raster)
library(here)
library(janitor)
library(tidyverse)
library(tmap)
library(rmapshaper)
```

### Importing eGrid Data

```{r}
## Importing state electricity values
# egrid2021_data <- readxl::read_excel(here("data", "eGRID2021_data.xlsx"), sheet = "ST21") %>% 
#   clean_names()

## Importing grid region electricity values
egrid2021_data <- readxl::read_excel(here("data", "eGRID2021_data.xlsx"), sheet = "SRL21") %>%
  clean_names()
```

### Standardizing state names and cleaning up rows

```{r}
# state_emissions <- egrid2021_data %>% 
#   mutate(co2e = state_annual_co2_equivalent_combustion_output_emission_rate_lb_m_wh
#          , state = state.name[match(state_abbreviation, state.abb)]) %>% 
#   select(c(state, co2e))
# 
# state_emissions <- state_emissions[-1,]

subregion_emissions <- egrid2021_data %>%
  mutate(co2e_per_mwh = as.numeric(e_grid_subregion_annual_co2_equivalent_combustion_output_emission_rate_lb_m_wh)
         , subregion = e_grid_subregion_acronym
         , subregion_name = e_grid_subregion_name) %>%
  filter(!subregion %in% c("AKGD", "AKMS", "HIMS", "HIOA", "PRMS")) %>% 
  select(c(subregion, subregion_name, co2e_per_mwh))

subregion_emissions <- subregion_emissions[-1,]
```

### Importing GEM data

```{r}
gem_data <- readxl::read_excel(here("data", "GEM_2021_data.xlsx"), sheet = "Steel Plants") %>% 
  clean_names() %>% 
  mutate(subnational_unit_province_state = case_when(subnational_unit_province_state == "Michican" ~ "Michigan"
                                                     , TRUE ~ as.character(subnational_unit_province_state)))
```

### Filtering to only look at plants and data that we are interested in

```{r}
plant_capacity_data_processing <- gem_data %>% 
  mutate(plant_name = plant_name_english
         , state = subnational_unit_province_state
         , bof_capacity = as.numeric(nominal_bof_steel_capacity_ttpa)
         , eaf_capacity = as.numeric(nominal_eaf_steel_capacity_ttpa)) %>% 
  filter(country == "United States"
         , status == "operating"
         , eaf_capacity != "N/A") %>% 
  select(plant_name
         , owner
         , coordinates
         , country
         , state
         , status
         , start_year
         , plant_age_years
         , eaf_capacity
         , bof_capacity
         , municipality)
```

### Only selecting columns we need for now

```{r}
plant_capacity <- plant_capacity_data_processing %>% 
  select(-c(country
         , owner
         , start_year
         , plant_age_years
         , status)) %>% 
  separate(coordinates, c("lat", "lon"), remove = TRUE, ",")
```

### Finding where plants are located in subregions

```{r}
## Reading in data
subregion_shapes_raw <- read_sf("~/Desktop/meds-courses/capstone-files/data/egrid2020_subregions/eGRID2020_subregions.shp") %>% 
  clean_names() %>% 
  filter(!zip_subregi %in% c("AKGD", "AKMS", "HIMS", "HIOA", "PRMS"))

## Making our file easier to load and map
subregion_shapes <- ms_simplify(subregion_shapes_raw, keep = 0.0005)

## Bringing in our points
plant_points <- st_geometry(st_as_sf(plant_capacity, coords = c("lon", "lat"))) %>% 
  st_set_crs("WGS84")

## Plotting to make sure that we have overlaps
# tm_shape(simple_shapes) +
#   tm_polygons() +
#   tm_shape(plant_points) +
#   tm_dots()

overlap <- st_within(plant_points, subregion_shapes)

## Going through plant_points and get the numeric value that is outputted and store that indexed value into subregion_vector()
subregion_vector <- c()
for (i in seq_along(overlap)) {
  subregion_vector[i] <- subregion_shapes$zip_subregi[overlap[[i]]]
}

## Adding column
plant_capacity <- plant_capacity %>% 
  mutate(subregion = subregion_vector)
```

### Merging data

```{r}
plant_emissions_by_subregion <- left_join(plant_capacity, subregion_emissions, by = "subregion")
```

### Importing AISI data

```{r}
AISI_regions_readin <- readxl::read_excel(here("data", "AISI_regions.xlsx"), sheet = "Regions by State") %>% 
  clean_names()

# AISI_city_readin <- readxl::read_excel(here("data", "AISI_regions.xlsx"), sheet = "Region by City") %>% 
#   clean_names()

AISI_data_readin <- readxl::read_excel(here("data", "AISI_data.xlsx"), sheet = "AISI Production Values") %>% 
  clean_names()
```

NE = Northeast

GL = Great Lakes

MW = Midwest

S = Southern

W = Western

```{r}
AISI_regions <- AISI_regions_readin %>% 
  filter(steel_plant_in_gspt == "yes")

AISI_data <- AISI_data_readin %>% 
  mutate(week_end_date = week_end_date_1
         , NE_util = north_east_region_capacity_utilization
         , GL_util = great_lakes_region_capacity_utilization
         , MW_util = midwest_region_capacity_utilization
         , S_util = southern_region_capacity_utilization
         , W_util = western_region_capacity_utilization) %>% 
  select(week_end_date
         , NE_util
         , GL_util
         , MW_util
         , S_util
         , W_util) %>% 
  filter(week_end_date < "2022-01-01") ## Missing January 2021 data

AISI_data <- AISI_data[-1,]
```

### Merging All Data

```{r}
regional_plant_emissions_raw <- left_join(plant_emissions_by_subregion, AISI_regions, by = "state") %>% 
  select(-c(steel_plant_in_gspt
            , state_abbreviation)) %>% 
  mutate(region = case_when(municipality %in% c("Alton"
                                                , "Sterling"
                                                , "Peoria"
                                                , "Granite City"
                                                , "Mansfield"
                                                , "Middletown") ~ "Midwest"
                            , municipality %in% c("Riverdale"
                                                  , "Chicago"
                                                  , "Bourbonnais"
                                                  , "Cuyahoga Heights"
                                                  , "Cleveland"
                                                  , "Toledo"
                                                  , "Lorain") ~ "Great Lakes"
                            , municipality %in% c("Mingo Junction"
                                                  , "Youngstown"
                                                  , "Canton") ~ "North East"
                            , TRUE ~ as.character(region)))
```

### Emissions Intensity

```{r}
## co2e_per_mwh is from egrid and is pounds of CO2e per MWH of electricity produced per grid location (not regional location)

## Global Efficiency Intelligence states that it takes 1377 KWH to produce 1 tonne of steel. "Global Efficiency Intelligence: Industrial Electrification in U.S. States"
eaf_MWH_per_tonne <- 1377 / 1000

## This a constant value per week
## eaf_capacity is in thousand tons per year and we are standardizing to tons per week
weekly_eaf_capacity_by_plant <- regional_plant_emissions_raw %>%
  mutate(weekly_eaf_capacity = ((eaf_capacity * 1000) / 52)) %>% 
  select(c(plant_name, weekly_eaf_capacity))

## emissions_intensity is pounds of CO2e per tonne of steel (the amount of co2e produced for every tonne of steel produced)

AISI_longer <- AISI_data %>% pivot_longer(cols = c(NE_util, GL_util, MW_util, S_util, W_util)
                 , names_to = "region"
                 , values_to = "utilization"
                 ) %>% 
  mutate(region = case_when(region == "NE_util" ~ "North East"
                   , region == "GL_util" ~ "Great Lakes"
                   , region == "MW_util" ~ "Midwest"
                   , region == "S_util" ~ "Southern"
                   , region == "W_util" ~ "Western"))

plant_emissions_long <- left_join(regional_plant_emissions, AISI_longer, by = "region") %>%
  mutate(emissions_intensity = (co2e_per_mwh * eaf_MWH_per_tonne)
         , weekly_eaf_capacity = ((eaf_capacity * 1000) / 52)
         , weekly_co2e = weekly_full_capacity_intensity * utilization)

plant_emissions_wide <- plant_emissions_long %>% 
  select(-utilization) %>% 
  pivot_wider(names_from = week_end_date
           , values_from = weekly_co2e)
```

This is where you need to pick up: We need to pivot longer the AISI_data in order to merge the capacity utilization by region. That way, we can multiply the utilization by the maximum capacity and then get how many tons of steel they are producing. You get that number that they produced for the week and multiply that by how much it takes to produce 1 ton of steel (the standard number that we have) and then that will give you the CO2e per plant per week based off of the regional utilization rates.

## Download data for Tableau mock-up

```{r}

write_csv(regional_plant_emissions, "/Users/ericabishop/Documents/MEDSwinter/EDS240-datavis/capstone_data_tab/regional_plant_emissions.csv")


```




```{r}
weekly_full_capacity_intensity = case_when(region == "North East" ~ emissions_intensity * weekly_eaf_capacity
                                           , region == "Great Lakes" ~ emissions_intensity *  weekly_eaf_capacity
                                           , region == "Midwest" ~ emissions_intensity *  weekly_eaf_capacity
                                           , region == "Southern" ~ emissions_intensity *  weekly_eaf_capacity
                                           , region == "Western" ~ emissions_intensity * weekly_eaf_capacity
                                           )
```
