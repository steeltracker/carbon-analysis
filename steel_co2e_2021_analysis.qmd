---
title: "state_emissions_per_plant"
format: html
author: "Amrit Sandhu, Erica Bishop, Michael Zargari, and Ruth Enriquez"
---

### Loading Libraries

```{r, message=FALSE}
library(sf)
library(here)
library(janitor)
library(tidyverse)
library(rmapshaper)
```

### Importing eGrid Data

The EPA eGrida Data, which was available for 2021 at the time of download, contains the emissions intensity of electricity produced in each sub region. For this analysis, we assume that each steel plant is drawing 100% of its electricity from the grid (and the eGrid subregion that it is located within).

```{r}
## Importing grid region electricity values
egrid2021_data <- readxl::read_excel(here("..", "data", "eGRID2021_data.xlsx"), sheet = "SRL21") %>%
  clean_names()

## Removing the first row since it is a part of the column names
egrid2021_data <- egrid2021_data[-1,]
```

### Standardizing state names and cleaning up rows in eGrid data

```{r}
## Cleaning egrid data for usability
emissions_by_subregion <- egrid2021_data %>%
  mutate(co2e_lbs_per_mwh = as.numeric (e_grid_subregion_annual_co2_equivalent_combustion_output_emission_rate_lb_m_wh)
         , subregion = e_grid_subregion_acronym
         , subregion_name = e_grid_subregion_name
         , co2e_tonnes_per_mwh = co2e_lbs_per_mwh / 2204.62262185) %>%
  filter(!subregion %in% c("AKGD", "AKMS", "HIMS", "HIOA", "PRMS")) %>% 
  select(c(subregion, subregion_name, co2e_tonnes_per_mwh))
```

### Importing GEM data

```{r}
gem_data_readin <- readxl::read_excel(here("..", "data", "GEM_2022_data.xlsx"), sheet = "Steel Plants") %>% 
  clean_names()
```

### Filtering to only look at plants and data that we are interested in

```{r}
## eaf_capacity is in thousand tonnes per year and we are standardizing to tonnes
gem_data_cleaned <- gem_data_readin %>% 
  filter(country == "United States"
         , status == "operating"
         , nominal_eaf_steel_capacity_ttpa != "N/A"
         , start_date < 2022
         , !plant_id %in% c("SUS00009", "SUS00061")) %>% 
  mutate(plant_name = plant_name_english
         , state = subnational_unit_province_state
         , eaf_capacity = as.numeric(nominal_eaf_steel_capacity_ttpa)
         , address = location_address
         , max_tonnes_of_steel_producible_annually = eaf_capacity * 1000) %>%
  select(-eaf_capacity) %>% 
  select(plant_id
         , plant_name
         , owner
         , coordinates
         , country
         , state
         , status
         , start_date
         , plant_age_years
         , max_tonnes_of_steel_producible_annually
         , municipality
         , address
         , category_steel_product
         , steel_products
         , responsible_steel_certification)

## Only selecting columns we need
gem_data <- gem_data_cleaned %>% 
  select(-c(country
         , start_date
         , status
         , responsible_steel_certification)) %>% 
  separate(coordinates, c("lat", "lon"), remove = TRUE, ",")
```

### Finding where plants are located in subregions and merging those with the gem_data

```{r}
## Reading in data
subregion_shapes_raw <- read_sf(here("..", "data", "egrid2020_subregions", "eGRID2020_subregions.shp")) %>% 
  clean_names() %>% 
  filter(!zip_subregi %in% c("AKGD", "AKMS", "HIMS", "HIOA", "PRMS"))

## Making our file easier to load and map
subregion_shapes <- ms_simplify(subregion_shapes_raw, keep = 0.0005)

## Bringing in our points
plant_points <- st_geometry(st_as_sf(gem_data, coords = c("lon", "lat"))) %>% 
  st_set_crs("WGS84")

## Plotting to make sure that we have overlaps
# tm_shape(subregion_shapes) +
#   tm_polygons() +
#   tm_shape(plant_points) +
#   tm_dots()

overlap <- st_within(plant_points, subregion_shapes)

## Going through plant_points and get the numeric value that is outputted and store that indexed value into subregion_vector()
subregion_vector <- c()
for (i in seq_along(overlap)) {
  subregion_vector[i] <- subregion_shapes$zip_subregi[overlap[[i]]]
}

## Adding column
gem_data <- gem_data %>% 
  mutate(subregion = subregion_vector)

## Merging Data
plant_emissions_by_subregion <- left_join(gem_data, emissions_by_subregion, by = "subregion")
```

### Importing AISI data

```{r, message=FALSE}
AISI_regions_readin <- readxl::read_excel(here("..", "data", "AISI_regions.xlsx"), sheet = "Regions by State") %>% 
  clean_names()

# AISI_city_readin <- readxl::read_excel(here("data", "AISI_regions.xlsx"), sheet = "Region by City") %>% 
#   clean_names()

AISI_data_readin <- readxl::read_excel(here("..", "data", "AISI_data.xlsx"), sheet = "AISI Production Values") %>% 
  clean_names()
```

NE = Northeast

GL = Great Lakes

MW = Midwest

S = Southern

W = Western

### Filtering AISI data, renaming columns, and selecting the weekly data and utilization rates we need

```{r}
AISI_regions <- AISI_regions_readin %>% 
  filter(steel_plant_in_gspt == "yes")

AISI_data <- AISI_data_readin %>% 
  rename(week_end_date = week_end_date_1
         , NE_util = north_east_region_capacity_utilization
         , GL_util = great_lakes_region_capacity_utilization
         , MW_util = midwest_region_capacity_utilization
         , S_util = southern_region_capacity_utilization
         , W_util = western_region_capacity_utilization) %>% 
  select(week_end_date
         , NE_util
         , GL_util
         , MW_util
         , S_util
         , W_util) %>% 
  filter(week_end_date < "2022-01-01") ## Missing January 2021 data

AISI_data <- AISI_data[-1,]
```

### Merging all of our data so far

```{r}
regional_plant_emissions <- left_join(plant_emissions_by_subregion, AISI_regions, by = "state") %>% 
  select(-c(steel_plant_in_gspt
            , state_abbreviation)) %>% 
  mutate(region = case_when(municipality %in% c("Alton"
                                                , "Sterling"
                                                , "Peoria"
                                                , "Granite City"
                                                , "Mansfield"
                                                , "Middletown") ~ "Midwest"
                            , municipality %in% c("Riverdale"
                                                  , "Chicago"
                                                  , "Bourbonnais"
                                                  , "Cuyahoga Heights"
                                                  , "Cleveland"
                                                  , "Toledo"
                                                  , "Lorain") ~ "Great Lakes"
                            , municipality %in% c("Mingo Junction"
                                                  , "Youngstown"
                                                  , "Canton") ~ "North East"
                            , TRUE ~ as.character(region)))
```

### Defining carbon intensity for eaf steel production and preparing data to calculate intensities

```{r}
## co2e_tonnes_per_mwh is from eGrid and is pounds of CO2e per MWH of electricity produced per grid location (not regional location)

## Global Efficiency Intelligence states that it takes 710 KWH to produce 1 tonne of steel. "Global Efficiency Intelligence: Industrial Electrification in U.S. States"
## MWH per tonne of steel
eaf_MWH_per_tonne <- 710 / 1000

## emissions_intensity is tonnes of CO2e per tonne of steel (the amount of co2e produced for every tonne of steel produced)

AISI_longer <- AISI_data %>% 
  pivot_longer(cols = c(NE_util, GL_util, MW_util, S_util, W_util)
                 , names_to = "region"
                 , values_to = "utilization") %>% 
  mutate(region = case_when(region == "NE_util" ~ "North East"
                   , region == "GL_util" ~ "Great Lakes"
                   , region == "MW_util" ~ "Midwest"
                   , region == "S_util" ~ "Southern"
                   , region == "W_util" ~ "Western"))
```

### Finding Weekly Scope 2 co2e values and putting it in long and wide format

```{r}
scope2_plant_emissions_long <- left_join(regional_plant_emissions, AISI_longer, by = "region") %>%
  mutate(estimated_emissions_intensity_tonne_per_tonne = (co2e_tonnes_per_mwh * eaf_MWH_per_tonne)
         , max_tonnes_of_steel_producible_weekly = ((max_tonnes_of_steel_producible_annually) / 48)
         , scope2_co2e_tonnes_per_week = (utilization * max_tonnes_of_steel_producible_weekly * estimated_emissions_intensity_tonne_per_tonne),
         ) %>% 
  relocate(max_tonnes_of_steel_producible_annually, .before = max_tonnes_of_steel_producible_weekly)

## Rounding the data
scope2_plant_emissions_long_rounded <- scope2_plant_emissions_long %>% 
  mutate_if(is.numeric, round, 2)

scope2_plant_emissions_wide <- scope2_plant_emissions_long_rounded %>% 
  select(-utilization) %>%
  pivot_wider(names_from = week_end_date
           , values_from = scope2_co2e_tonnes_per_week)
```

### Finding Scope 2 values for the complete 2021 year

```{r}
yearly_scope2 <- scope2_plant_emissions_long %>% 
  group_by(plant_id, plant_name, address, lat, lon) %>% 
  summarize(scope2_co2e_tonnes_2021 = sum(scope2_co2e_tonnes_per_week)) %>% 
  ungroup()
```

### Extracting zip codes to find matches with addresses

```{r}
## Extracting zip code from address
zipcode_extraction <- yearly_scope2 %>%
  mutate(address2 = address) %>%
  separate(col = address2, into = c("zip_code_part1", "zip_code_part2", "zip_code_part3", "zip_code_part4", "zip_code_part5"), sep = ",") %>%
  select(-c(zip_code_part1, zip_code_part5)) %>%
  mutate(zip_code_part2 = parse_number(zip_code_part2)
         , zip_code_part3 = parse_number(zip_code_part3)
         , zip_code_part4 = parse_number(zip_code_part4)
         , zip_code = coalesce(zip_code_part2, zip_code_part3, zip_code_part4)) %>%
  select(-c(zip_code_part2, zip_code_part3, zip_code_part4))

checking_unique_zipcodes_scope2 <- zipcode_extraction %>% 
  group_by(zip_code) %>% 
  summarise(count = n()) %>% 
  filter(count < 2) %>% 
  drop_na() %>%
  ungroup() %>% 
  select(zip_code)

unique_scope2_zip_codes <- checking_unique_zipcodes_scope2 %>% 
  left_join(zipcode_extraction, by = "zip_code")
```

### Reading in Greenhouse Gas Emissions data (scope 1) and extracting the non-repeating zip codes

```{r}
scope1_readin <- readxl::read_excel(here("..", "data", "GHG_flight_scope1.xls"), skip = 5, na = c("", 0)) %>% 
  clean_names()

scope1 <- scope1_readin %>% 
  select(c(zip_code
           , ghg_quantity_metric_tons_co2e
           , ghgrp_id)) %>% 
  drop_na()

checking_unique_zipcodes_scope1 <- scope1 %>% 
  group_by(zip_code) %>% 
  summarise(count = n()) %>% 
  filter(count < 2) %>% 
  ungroup() %>% 
  select(zip_code)

unique_scope1_zipcodes <- checking_unique_zipcodes_scope1 %>% 
  left_join(scope1, by = "zip_code")
```

### Joining scope 1 and scope 2 unique zip codes

```{r}
## Manually checked zip codes and addresses and plant names and the following are for sure a match
scope_1_and_2_zipcode_matches <- unique_scope1_zipcodes %>% 
  right_join(unique_scope2_zip_codes, by = "zip_code") %>% 
  drop_na() %>% 
  rename(scope1_co2e_tonnes_2021 = ghg_quantity_metric_tons_co2e) %>% 
  relocate(address, .after = zip_code) %>% 
  relocate(plant_name, .after = address)
```

### Anti-Joining to find remaining zip codes that had not matched and manually matching them

```{r}
remaining_zipcodes <-  zipcode_extraction %>% 
  anti_join(scope_1_and_2_zipcode_matches, by = "zip_code")

## Correctly matching the zip codes and assigning the plant id equivalents between both datasets 
corrected_ghgids <- remaining_zipcodes %>% 
  mutate(ghgrp_id = case_when(plant_id == "SUS00002" ~ "1003268"
                              , plant_id == "SUS00007" ~ "1003668"
                              , plant_id == "SUS00015" ~ "1000394"
                              , plant_id == "SUS00061" ~ "1001699"
                              , plant_id == "SUS00042" ~ "1004616"
                              , plant_id == "SUS00019" ~ "1002977"
                              , plant_id == "SUS00025" ~ "1007642"
                              , plant_id == "SUS00032" ~ "1007921"
                              , plant_id == "SUS00058" ~ "1007348"
                              , plant_id == "SUS00029" ~ "1005700")
         , ghgrp_id = as.numeric(ghgrp_id)
         ) %>% 
  left_join(scope1, by = "ghgrp_id") %>% 
  select(-c(zip_code.x, zip_code.y)) %>% 
  rename(scope1_co2e_tonnes_2021 = ghg_quantity_metric_tons_co2e)
```

### Combining all of our data to get a final dataset with scope 1 and 2 2021 values

```{r}
scope_1_and_2_emissions_2021_prestep <- scope_1_and_2_zipcode_matches %>% 
  full_join(corrected_ghgids) %>% 
  select(-zip_code) %>% 
  relocate(c(plant_id, lat, lon), .before = address) %>% 
  relocate(c(ghgrp_id, plant_name), .after = plant_id) %>% 
  mutate(total_co2e_tonnes_2021 = scope1_co2e_tonnes_2021 + scope2_co2e_tonnes_2021, .after = address)

scope_1_and_2_emissions_2021 <- scope_1_and_2_emissions_2021_prestep %>% 
  left_join(scope2_plant_emissions_long) %>% 
  select(-c(week_end_date, utilization, estimated_emissions_intensity_tonne_per_tonne, max_tonnes_of_steel_producible_weekly, scope2_co2e_tonnes_per_week)) %>% 
  distinct() %>% 
  mutate_if(is.numeric, round, 3) %>% 
  relocate(c(max_tonnes_of_steel_producible_annually, co2e_tonnes_per_mwh, scope1_co2e_tonnes_2021, scope2_co2e_tonnes_2021, total_co2e_tonnes_2021), .after = region)
```

### Adding on the matched columns and id numbers onto our scope 2 data

```{r}
## Finding weekly scope 2 values first
weekly_scope2_plant_emissions_long <- left_join(scope_1_and_2_emissions_2021_prestep, scope2_plant_emissions_long) %>% 
  select(-c(total_co2e_tonnes_2021, scope1_co2e_tonnes_2021, scope2_co2e_tonnes_2021)) %>% 
  relocate(co2e_tonnes_per_mwh, .after = utilization) %>% 
  mutate_if(is.numeric, round, 3)

weekly_scope2_plant_emissions_wide <- weekly_scope2_plant_emissions_long %>%
  select(-c(utilization)) %>% 
  pivot_wider(names_from = week_end_date
           , values_from = scope2_co2e_tonnes_per_week)
```

### Making our annual 2021 data into weekly to see breakdown of weekly co2e productions that include scope 1 AND scope 2

```{r}
weekly_scope_1_and_2_long <- left_join(scope_1_and_2_emissions_2021_prestep, scope2_plant_emissions_long) %>% 
  mutate(scope1_tonnes_of_co2e_per_week = (scope1_co2e_tonnes_2021/48)
         , total_weekly_co2e_tonnes = scope1_tonnes_of_co2e_per_week + scope2_co2e_tonnes_per_week) %>% 
  select(-c(total_co2e_tonnes_2021, scope1_co2e_tonnes_2021, scope2_co2e_tonnes_2021)) %>% 
  relocate(co2e_tonnes_per_mwh, .after = utilization) %>% 
  mutate_if(is.numeric, round, 3)

weekly_scope_1_and_2_wide <- weekly_scope_1_and_2_long %>%
  select(-c(utilization, scope2_co2e_tonnes_per_week)) %>% 
  pivot_wider(names_from = week_end_date
           , values_from = total_weekly_co2e_tonnes)
```

### Finding the amount of steel produced weekly and annually (_long and _wide denote datasets with weekly values)

```{r}
### Weekly -----
plant_productions_long <- scope2_plant_emissions_long %>% 
  mutate(tonnes_of_steel_produced = utilization * max_tonnes_of_steel_producible_weekly) %>% 
  select(-scope2_co2e_tonnes_per_week)

## Rounding the data
plant_productions_long_rounded <- plant_productions_long %>% 
  mutate_if(is.numeric, round, 3)

## Amount of steel produced per week
plant_productions_wide <- plant_productions_long_rounded %>% 
  select(-utilization) %>%
  pivot_wider(names_from = week_end_date
           , values_from = tonnes_of_steel_produced)


### 2021 Year ----
## Amount of steel produced in 2021
plant_productions_2021 <- plant_productions_long_rounded %>% 
  select(-c(week_end_date, utilization)) %>% 
  group_by_at(vars(-tonnes_of_steel_produced)) %>% 
  summarize(total_tonnes_steel_produced_2021 = sum(tonnes_of_steel_produced)) %>% 
  ungroup()
```

### Adding 2021 plant productions column next to yearly co2e columns

```{r}
total_steel_plant_emissions_and_productions_2021 <- left_join(plant_productions_2021, scope_1_and_2_emissions_2021) %>% 
  relocate(ghgrp_id, .after = plant_id) %>% 
  relocate(total_tonnes_steel_produced_2021, .after = total_co2e_tonnes_2021) %>% 
  mutate(emissions_intensity_co2e_tonne_per_tonne = total_co2e_tonnes_2021 / total_tonnes_steel_produced_2021, .after = estimated_emissions_intensity_tonne_per_tonne)
```

## Downloading Data

### Weekly scope 1 and 2 co2e wide

```{r, include=FALSE}
write_csv(weekly_scope_1_and_2_wide, here("output-data", "weekly_scope1_scope2_steel_plant_emissions_2021.csv"))
```

### Weekly scope 1 and 2 co2e long

```{r, include=FALSE}
write_csv(weekly_scope_1_and_2_long, here("output-data", "weekly_scope1_scope2_steel_plant_emissions_2021_long.csv"))
```

### Weekly scope 2 co2e wide

```{r, include=FALSE}
write_csv(weekly_scope2_plant_emissions_wide, here("output-data", "weekly_scope2_plant_emissions_2021.csv"))
```

### Weekly scope 2 co2e long

```{r, include=FALSE}
write_csv(weekly_scope2_plant_emissions_long, here("output-data", "weekly_scope2_plant_emissions_2021_long.csv"))
```

### Total annual productions and scope 1 and 2 co2e emissions

```{r, include=FALSE}
write_csv(total_steel_plant_emissions_and_productions_2021, here("output-data", "2021_steel_plant_emissions_and_productions.csv"))
```

### Weekly steel plant productions wide

```{r}
write_csv(plant_productions_wide, here("output-data", "weekly_steel_production.csv"))
```

### Weekly steel plant productions long

```{r}
write_csv(plant_productions_long, here("output-data", "weekly_steel_production_long.csv"))
```

```{r}

```
